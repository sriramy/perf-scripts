# perf script event handlers, generated by perf script -g python
# Licensed under the terms of the GNU GPL License version 2

# The common_* event handler fields are the most useful fields common to
# all events.  They don't necessarily correspond to the 'common_*' fields
# in the format files.  Those fields not available as handler params can
# be retrieved using Python functions of the form common_*(context).
# See the perf-script-python Documentation for the list of available functions.

from __future__ import print_function

import git
import sys

def get_git_root():
	git_repo = git.Repo(None, search_parent_directories=True)
	return git_repo.git.rev_parse("--show-toplevel")

sys.path.append(get_git_root() + '/util/lib/Perf/Trace')

from perf_trace_context import *
from Core import *
from Util import *
from functools import cmp_to_key

all_event_list = []; # insert all tracepoint event related with this script

buffer_budget = 65536; # the budget of tx_queue_list

tx_queue_list = []; # list of packets which pass through dev_queue_xmit
tx_xmit_list = []; # list of packets which pass through dev_hard_start_xmit
tx_free_list = [];  # list of packets which is freed

# indices of event_info tuple
EINFO_IDX_NAME=   0
EINFO_IDX_CONTEXT=1
EINFO_IDX_CPU=    2
EINFO_IDX_TIME=   3
EINFO_IDX_PID=    4
EINFO_IDX_COMM=   5

# Calculate a time interval(msec) from src(nsec) to dst(nsec)
def diff_msec(src, dst):
	return (dst - src) / 1000000.0

# Display a process of transmitting a packet
def print_transmit(hunk):
	print("%6d.%06dsec %12.3fmsec %12.3fmsec" %
		(nsecs_secs(hunk['queue_t']),
		nsecs_nsecs(hunk['queue_t'])/1000,
		diff_msec(hunk['queue_t'], hunk['xmit_t']),
		diff_msec(hunk['queue_t'], hunk['free_t'])))

# def trace_begin():
# 	print("in trace_begin")

def trace_end():
	# order all events in time
	all_event_list.sort(key=cmp_to_key(lambda a,b :a[EINFO_IDX_TIME] < b[EINFO_IDX_TIME]))
	# process all events
	for i in range(len(all_event_list)):
		event_info = all_event_list[i]
		name = event_info[EINFO_IDX_NAME]
		if name == 'kprobes__dev_queue_xmitp':
			handle_dev_queue_xmit(event_info)
		elif name == 'kprobes__dev_hard_start_xmitp':
			handle_dev_hard_start_xmit(event_info)
		elif name == 'kprobes__tpacket_destruct_skbp':
			handle_tpacket_destruct_skb(event_info)
	# display transmit hunks
	print("         queue            xmit            free")
	for i in range(len(tx_free_list)):
		print_transmit(tx_free_list[i])

def kprobes__dev_queue_xmitp(event_name, context, common_cpu,
	common_secs, common_nsecs, common_pid, common_comm,
	common_callchain, __probe_ip, skb, perf_sample_dict):
	event_info = (event_name, context, common_cpu, nsecs(common_secs, common_nsecs), common_pid, common_comm, skb)
	all_event_list.append(event_info)

def kprobes__dev_hard_start_xmitp(event_name, context, common_cpu,
	common_secs, common_nsecs, common_pid, common_comm,
	common_callchain, __probe_ip, skb, perf_sample_dict):
	event_info = (event_name, context, common_cpu, nsecs(common_secs, common_nsecs), common_pid, common_comm, skb)
	all_event_list.append(event_info)

def kprobes__tpacket_destruct_skbp(event_name, context, common_cpu,
	common_secs, common_nsecs, common_pid, common_comm,
	common_callchain, __probe_ip, skb, perf_sample_dict):
	event_info = (event_name, context, common_cpu, nsecs(common_secs, common_nsecs), common_pid, common_comm, skb)
	all_event_list.append(event_info)

def handle_dev_queue_xmit(event_info):
	(event_name, context, common_cpu, time,
  		common_pid, common_comm, skbaddr) = event_info
	skb = {'skbaddr':skbaddr, 'queue_t':time}
	tx_queue_list.insert(0, skb)

def handle_dev_hard_start_xmit(event_info):
	(event_name, context, common_cpu, time,
  		common_pid, common_comm, skbaddr) = event_info
	for i in range(len(tx_queue_list)):
		skb = tx_queue_list[i]
		if skb['skbaddr'] == skbaddr:
			skb['xmit_t'] = time
			tx_xmit_list.insert(0, skb)
			del tx_queue_list[i]
			return

def handle_tpacket_destruct_skb(event_info):
	(event_name, context, common_cpu, time,
  		common_pid, common_comm, skbaddr) = event_info
	for i in range(len(tx_queue_list)):
		skb = tx_queue_list[i]
		if skb['skbaddr'] == skbaddr:
			skb['xmit_t'] = nsecs(0, 0)
			skb['free_t'] = time
			tx_free_list.append(skb)
			del tx_queue_list[i]
			return
	for i in range(len(tx_xmit_list)):
		skb = tx_xmit_list[i]
		if skb['skbaddr'] == skbaddr:
			skb['free_t'] = time
			tx_free_list.append(skb)
			del tx_xmit_list[i]
			return
